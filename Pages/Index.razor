@page "/"
@using CPC.Interfaces
@using CPC.Data
@inject IPersonService PersonService
@inject IReportingService ReportingService

<PageTitle>Customer Preference Centre</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Customer Preference Centre</MudText>

<MudGrid Align="Align.Left">
    <MudItem xs="7">
        <MudForm>
            <MudRadioGroup @bind-SelectedOption="@SelectedPerson">
                <MudRadio Option="@("A")" Color="Color.Primary">Person A</MudRadio>
                <MudRadio Option="@("B")" Color="Color.Primary">Person B</MudRadio>
                <MudRadio Option="@("C")" Color="Color.Primary">Person C</MudRadio>
            </MudRadioGroup>
        </MudForm>
    </MudItem>
    <MudItem xs="7">
        <MudDatePicker Label="Select date" @bind-Date="_selectedDate" DateFormat="dd/MM/yyyy"/>
    </MudItem>
    <MudItem xs="7">
        <MudSelect @bind-Value="@Frequency" Label="Frequency" Placeholder="Please select frequency" AdornmentColor="Color.Primary">
            <MudSelectItem Value="@(Data.Frequency.Daily.ToString())">Daily</MudSelectItem>
            <MudSelectItem Value="@(Data.Frequency.Weekly.ToString())">Weekly</MudSelectItem>
            <MudSelectItem Value="@(Data.Frequency.Monthly.ToString())">Monthly</MudSelectItem>
            <MudSelectItem Value="@(Data.Frequency.SpecificDays.ToString())">Specific days (select below)</MudSelectItem>
            <MudSelectItem Value="@(Data.Frequency.Never.ToString())">Never</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="7">
        <MudPaper Class="d-flex align-center flex-grow-1 gap-4" Elevation="0">
            <MudCheckBox Class="py-1 d-flex flex-1" @bind-Checked="@Mon_CheckBox" Label="Mon" Color="Color.Primary"></MudCheckBox>
            <MudCheckBox Class="py-1 d-flex flex-1" @bind-Checked="@Tues_CheckBox" Label="Tues" Color="Color.Primary"></MudCheckBox>
            <MudCheckBox Class="py-1 d-flex flex-1" @bind-Checked="@Weds_CheckBox" Label="Weds" Color="Color.Primary"></MudCheckBox>
            <MudCheckBox Class="py-1 d-flex flex-1" @bind-Checked="@Thurs_CheckBox" Label="Thurs" Color="Color.Primary"></MudCheckBox>
            <MudCheckBox Class="py-1 d-flex flex-1" @bind-Checked="@Fri_CheckBox" Label="Fri" Color="Color.Primary"></MudCheckBox>
            <MudCheckBox Class="py-1 d-flex flex-1" @bind-Checked="@Sat_CheckBox" Label="Sat" Color="Color.Primary"></MudCheckBox>
            <MudCheckBox Class="py-1 d-flex flex-1" @bind-Checked="@Sun_CheckBox" Label="Sun" Color="Color.Primary"></MudCheckBox>
        </MudPaper>
    </MudItem>
    <MudItem xs="7">
        <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="@(async () => await SavePreferences())">Save Preferences</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="@(async () => await GenerateReport())">Generate Report</MudButton>
    </MudItem>
    <MudItem xs="7">
        <div class="d-flex align-center">
            <MudButton Variant="Variant.Outlined" OnClick="Reset">Reset</MudButton>
            <MudText Class="ml-4">@Feedback</MudText>
        </div>
    </MudItem>
    <MudItem xs="7">
        <MudTextField @ref="multilineReference" T="string" Label="Report" Variant="Variant.Filled" Text="@_report" Lines="10" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.CenterFocusWeak" OnAdornmentClick="@(() => multilineReference.FocusAsync())"/>
    </MudItem>
</MudGrid>

@code {

    private bool Mon_CheckBox { get; set; }
    private bool Tues_CheckBox { get; set; }
    private bool Weds_CheckBox { get; set; }
    private bool Thurs_CheckBox { get; set; }
    private bool Fri_CheckBox { get; set; }
    private bool Sat_CheckBox { get; set; }
    private bool Sun_CheckBox { get; set; }
    private string SelectedPerson { get; set; }
    private string Frequency { get; set; }

    private string Feedback;
    private string _report;
    private DateTime? _selectedDate;
    private MudTextField<string> multilineReference;
    private List<Person> People;

    protected override async Task OnInitializedAsync()
    {
        await Reset();
    }

    async Task Reset()
    {
        Frequency = null;
        SelectedPerson = null;
        Feedback = null;
        _selectedDate = DateTime.Today;
        People = new List<Person>();
        Mon_CheckBox = false;
        Tues_CheckBox = false;
        Weds_CheckBox = false;
        Thurs_CheckBox = false;
        Fri_CheckBox = false;
        Sat_CheckBox = false;
        Sun_CheckBox = false;
        _report = "Report will be generated here.";
    }

    async Task<List<DayOfWeek>> GetDaysOfWeek()
    {
        var days = new List<DayOfWeek>();

        if (Mon_CheckBox)
        {
            days.Add(DayOfWeek.Monday);
        }

        if (Tues_CheckBox)
        {
            days.Add(DayOfWeek.Tuesday);
        }

        if (Weds_CheckBox)
        {
            days.Add(DayOfWeek.Wednesday);
        }

        if (Thurs_CheckBox)
        {
            days.Add(DayOfWeek.Thursday);
        }

        if (Fri_CheckBox)
        {
            days.Add(DayOfWeek.Friday);
        }

        if (Sat_CheckBox)
        {
            days.Add(DayOfWeek.Saturday);
        }

        if (Sun_CheckBox)
        {
            days.Add(DayOfWeek.Sunday);
        }

        return days;
    }

    async Task SavePreferences()
    {
        if (SelectedPerson is null || Frequency is null)
        {
            Feedback = "Please select all preferences";
            await Task.Delay(1000);
            Feedback = null;
        }
        else
        {
            var person = PersonService.CreatePerson(Frequency, _selectedDate, await GetDaysOfWeek(), SelectedPerson);
            var findPerson = People.FirstOrDefault(x => x.Name == person.Name);
            if (findPerson is null)
            {
                People.Add(person);
            }
            else
            {
                People.FirstOrDefault(x => x.Name == person.Name)!.Name = person.Name;
                People.FirstOrDefault(x => x.Name == person.Name)!.NotificationDates = person.NotificationDates;
            }
            Feedback = "Saved!";
            await Task.Delay(1000);
            Feedback = null;
        }
    }

    async Task GenerateReport()
    {
        if (!People.Any())
        {
            Feedback = "Please select all preferences";
            await Task.Delay(1000);
            Feedback = null;
        }
        else
        {
            _report = ReportingService.GenerateReport(People);
        }
    }

}